//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\Users\msi\Documents\Visual Studio 2012\Projects\EnvironmentCreator\EnvironmentCreator\Gammars\Hello.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EnvironmentCreator.Gammars {
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class HelloParser : Parser {
	public const int
		T__0=1, ID=2, WS=3;
	public static readonly string[] tokenNames = {
		"<INVALID>", "'hello'", "ID", "WS"
	};
	public const int
		RULE_r = 0;
	public static readonly string[] ruleNames = {
		"r"
	};

	public override string GrammarFileName { get { return "Hello.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public HelloParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(HelloParser.ID, 0); }
		public RContext r() {
			return GetRuleContext<RContext>(0);
		}
		public RContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_r; }
		public override void EnterRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.EnterR(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IHelloListener typedListener = listener as IHelloListener;
			if (typedListener != null) typedListener.ExitR(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHelloVisitor<TResult> typedVisitor = visitor as IHelloVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitR(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RContext r() {
		RContext _localctx = new RContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_r);
		try {
			State = 6;
			switch (_input.La(1)) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 2; Match(1);
				State = 3; Match(ID);
				State = 4; r();
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 2);
				{
				State = 5; Match(ID);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x5\v\x4\x2\t\x2"+
		"\x3\x2\x3\x2\x3\x2\x3\x2\x5\x2\t\n\x2\x3\x2\x2\x2\x2\x3\x2\x2\x2\x2\n"+
		"\x2\b\x3\x2\x2\x2\x4\x5\a\x3\x2\x2\x5\x6\a\x4\x2\x2\x6\t\x5\x2\x2\x2\a"+
		"\t\a\x4\x2\x2\b\x4\x3\x2\x2\x2\b\a\x3\x2\x2\x2\t\x3\x3\x2\x2\x2\x3\b";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EnvironmentCreator.Gammars
