//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\ANTLR\Grammars\GStrat.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EnvironmentCreator.Gammars {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GStratParser : Parser {
	public const int
		T__14=1, T__13=2, T__12=3, T__11=4, T__10=5, T__9=6, T__8=7, T__7=8, T__6=9, 
		T__5=10, T__4=11, T__3=12, T__2=13, T__1=14, T__0=15, OPERATOR_ASSIGN=16, 
		BOOL_ID=17, NUMBER_ID=18, ID=19, INT=20, MUL=21, DIV=22, MOD=23, ADD=24, 
		SUB=25, EQUAL=26, NOT_EQUAL=27, LESS_THEN=28, LESS__OR_EQ=29, MORE_THEN=30, 
		MORE_OR_EQ=31;
	public static readonly string[] tokenNames = {
		"<INVALID>", "','", "'('", "'{'", "'action'", "'effe'", "'extends'", "'}'", 
		"'effs'", "'pre'", "')'", "'='", "';'", "'duration'", "'type'", "'instance'", 
		"OPERATOR_ASSIGN", "'boolean'", "'number'", "ID", "INT", "'*'", "'/'", 
		"'%'", "'+'", "'-'", "'=='", "'!='", "'<'", "'<='", "'>'", "'>='"
	};
	public const int
		RULE_root = 0, RULE_type = 1, RULE_variable = 2, RULE_instance = 3, RULE_action = 4, 
		RULE_precondition = 5, RULE_functionCall = 6, RULE_effect = 7, RULE_expression = 8;
	public static readonly string[] ruleNames = {
		"root", "type", "variable", "instance", "action", "precondition", "functionCall", 
		"effect", "expression"
	};

	public override string GrammarFileName { get { return "GStrat.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GStratParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RootContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public IReadOnlyList<ActionContext> action() {
			return GetRuleContexts<ActionContext>();
		}
		public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public IReadOnlyList<InstanceContext> instance() {
			return GetRuleContexts<InstanceContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_root; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 30;
			switch (_input.La(1)) {
			case 14:
				{
				State = 18; type();
				}
				break;
			case 15:
				{
				State = 19; instance();
				}
				break;
			case 4:
				{
				State = 20; action();
				State = 27;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 1) | (1L << 4) | (1L << 15))) != 0)) {
					{
					State = 25;
					switch (_input.La(1)) {
					case 1:
						{
						State = 21; Match(1);
						State = 22; type();
						}
						break;
					case 15:
						{
						State = 23; instance();
						}
						break;
					case 4:
						{
						State = 24; action();
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					}
					State = 29;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewTypeContext : TypeContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GStratParser.ID); }
		public IReadOnlyList<VariableContext> variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public ITerminalNode ID(int i) {
			return GetToken(GStratParser.ID, i);
		}
		public NewTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterNewType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitNewType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type);
		int _la;
		try {
			_localctx = new NewTypeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 32; Match(14);
			State = 33; Match(ID);
			State = 36;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 34; Match(6);
				State = 35; Match(ID);
				}
			}

			State = 38; Match(3);
			State = 47;
			_la = _input.La(1);
			if (_la==BOOL_ID || _la==NUMBER_ID) {
				{
				State = 39; variable();
				State = 44;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==1) {
					{
					{
					State = 40; Match(1);
					State = 41; variable();
					}
					}
					State = 46;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 49; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variable; }
	 
		public VariableContext() { }
		public virtual void CopyFrom(VariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewVariableContext : VariableContext {
		public IToken opt;
		public ITerminalNode ID() { return GetToken(GStratParser.ID, 0); }
		public NewVariableContext(VariableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterNewVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitNewVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_variable);
		int _la;
		try {
			_localctx = new NewVariableContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 51;
			((NewVariableContext)_localctx).opt = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BOOL_ID || _la==NUMBER_ID) ) {
				((NewVariableContext)_localctx).opt = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 52; Match(ID);
			State = 53; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GStratParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(GStratParser.ID, i);
		}
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_instance; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterInstance(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitInstance(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInstance(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 55; Match(15);
			State = 56; Match(ID);
			State = 57; Match(ID);
			State = 62;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1) {
				{
				{
				State = 58; Match(1);
				State = 59; Match(ID);
				}
				}
				State = 64;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 65; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public PreconditionContext precondition(int i) {
			return GetRuleContext<PreconditionContext>(i);
		}
		public IReadOnlyList<EffectContext> effect() {
			return GetRuleContexts<EffectContext>();
		}
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GStratParser.ID); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public EffectContext effect(int i) {
			return GetRuleContext<EffectContext>(i);
		}
		public IReadOnlyList<PreconditionContext> precondition() {
			return GetRuleContexts<PreconditionContext>();
		}
		public ITerminalNode ID(int i) {
			return GetToken(GStratParser.ID, i);
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_action; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 67; Match(4);
			State = 68; Match(ID);
			State = 69; Match(2);
			State = 76;
			_la = _input.La(1);
			if (_la==ID) {
				{
				{
				State = 70; Match(ID);
				State = 71; Match(ID);
				}
				{
				State = 73; Match(1);
				State = 74; Match(ID);
				State = 75; Match(ID);
				}
				}
			}

			State = 78; Match(10);
			State = 79; Match(13);
			State = 80; Match(11);
			State = 81; expression(0);
			State = 82; Match(9);
			State = 83; Match(3);
			State = 87;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 84; precondition();
				}
				}
				State = 89;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 90; Match(7);
			State = 91; Match(8);
			State = 92; Match(3);
			State = 96;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 93; effect();
				}
				}
				State = 98;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 99; Match(7);
			State = 100; Match(5);
			State = 101; Match(3);
			State = 105;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==ID) {
				{
				{
				State = 102; effect();
				}
				}
				State = 107;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 108; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreconditionContext : ParserRuleContext {
		public PreconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_precondition; }
	 
		public PreconditionContext() { }
		public virtual void CopyFrom(PreconditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrecondExprContext : PreconditionContext {
		public IToken op;
		public ITerminalNode ID() { return GetToken(GStratParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrecondExprContext(PreconditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterPrecondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitPrecondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallFnPrecondContext : PreconditionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallFnPrecondContext(PreconditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterCallFnPrecond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitCallFnPrecond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFnPrecond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreconditionContext precondition() {
		PreconditionContext _localctx = new PreconditionContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_precondition);
		int _la;
		try {
			State = 114;
			switch ( Interpreter.AdaptivePredict(_input,11,_ctx) ) {
			case 1:
				_localctx = new PrecondExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 110; Match(ID);
				State = 111;
				((PrecondExprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << LESS_THEN) | (1L << LESS__OR_EQ) | (1L << MORE_THEN) | (1L << MORE_OR_EQ))) != 0)) ) {
					((PrecondExprContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 112; expression(0);
				}
				break;

			case 2:
				_localctx = new CallFnPrecondContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 113; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IReadOnlyList<ITerminalNode> INT() { return GetTokens(GStratParser.INT); }
		public IReadOnlyList<ITerminalNode> ID() { return GetTokens(GStratParser.ID); }
		public ITerminalNode INT(int i) {
			return GetToken(GStratParser.INT, i);
		}
		public ITerminalNode ID(int i) {
			return GetToken(GStratParser.ID, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCall; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 116; Match(ID);
			State = 117; Match(2);
			State = 119;
			switch ( Interpreter.AdaptivePredict(_input,12,_ctx) ) {
			case 1:
				{
				State = 118;
				_la = _input.La(1);
				if ( !(_la==ID || _la==INT) ) {
				_errHandler.RecoverInline(this);
				}
				Consume();
				}
				break;
			}
			State = 126;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==INT) {
				{
				State = 124;
				switch (_input.La(1)) {
				case 1:
					{
					State = 121; Match(1);
					State = 122; Match(ID);
					}
					break;
				case INT:
					{
					State = 123; Match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 129; Match(10);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	 
		public EffectContext() { }
		public virtual void CopyFrom(EffectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallFnContext : EffectContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallFnContext(EffectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterCallFn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitCallFn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : EffectContext {
		public ITerminalNode OPERATOR_ASSIGN() { return GetToken(GStratParser.OPERATOR_ASSIGN, 0); }
		public ITerminalNode ID() { return GetToken(GStratParser.ID, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignExprContext(EffectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_effect);
		try {
			State = 137;
			switch ( Interpreter.AdaptivePredict(_input,15,_ctx) ) {
			case 1:
				_localctx = new AssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 131; Match(ID);
				State = 132; Match(OPERATOR_ASSIGN);
				State = 133; expression(0);
				State = 134; Match(12);
				}
				break;

			case 2:
				_localctx = new CallFnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 136; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentContext : ExpressionContext {
		public ITerminalNode ID() { return GetToken(GStratParser.ID, 0); }
		public IdentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(GStratParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public IToken opt;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExpressionContext {
		public IToken opt;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public MulDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterParenth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitParenth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 16;
		EnterRecursionRule(_localctx, 16, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 146;
			switch (_input.La(1)) {
			case ID:
				{
				_localctx = new IdentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 140; Match(ID);
				}
				break;
			case INT:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 141; Match(INT);
				}
				break;
			case 2:
				{
				_localctx = new ParenthContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 142; Match(2);
				State = 143; expression(0);
				State = 144; Match(10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 156;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 154;
					switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 148;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 149;
						((MulDivModContext)_localctx).opt = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MulDivModContext)_localctx).opt = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 150; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 151;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 152;
						((AddSubContext)_localctx).opt = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).opt = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 153; expression(5);
						}
						break;
					}
					} 
				}
				State = 158;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,18,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 8: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3!\xA2\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\x3\x2\a\x2\x1C\n\x2\f"+
		"\x2\xE\x2\x1F\v\x2\x5\x2!\n\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3\'\n\x3\x3"+
		"\x3\x3\x3\x3\x3\x3\x3\a\x3-\n\x3\f\x3\xE\x3\x30\v\x3\x5\x3\x32\n\x3\x3"+
		"\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5\x3\x5\x3\x5\a\x5?"+
		"\n\x5\f\x5\xE\x5\x42\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x5\x6O\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6"+
		"\x3\x6\a\x6X\n\x6\f\x6\xE\x6[\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x61\n"+
		"\x6\f\x6\xE\x6\x64\v\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6j\n\x6\f\x6\xE\x6"+
		"m\v\x6\x3\x6\x3\x6\x3\a\x3\a\x3\a\x3\a\x5\au\n\a\x3\b\x3\b\x3\b\x5\bz"+
		"\n\b\x3\b\x3\b\x3\b\a\b\x7F\n\b\f\b\xE\b\x82\v\b\x3\b\x3\b\x3\t\x3\t\x3"+
		"\t\x3\t\x3\t\x3\t\x5\t\x8C\n\t\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\x5\n"+
		"\x95\n\n\x3\n\x3\n\x3\n\x3\n\x3\n\x3\n\a\n\x9D\n\n\f\n\xE\n\xA0\v\n\x3"+
		"\n\x2\x2\x3\x12\v\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2"+
		"\x2\a\x3\x2\x13\x14\x3\x2\x1C!\x3\x2\x15\x16\x3\x2\x17\x19\x3\x2\x1A\x1B"+
		"\xAE\x2 \x3\x2\x2\x2\x4\"\x3\x2\x2\x2\x6\x35\x3\x2\x2\x2\b\x39\x3\x2\x2"+
		"\x2\n\x45\x3\x2\x2\x2\ft\x3\x2\x2\x2\xEv\x3\x2\x2\x2\x10\x8B\x3\x2\x2"+
		"\x2\x12\x94\x3\x2\x2\x2\x14!\x5\x4\x3\x2\x15!\x5\b\x5\x2\x16\x1D\x5\n"+
		"\x6\x2\x17\x18\a\x3\x2\x2\x18\x1C\x5\x4\x3\x2\x19\x1C\x5\b\x5\x2\x1A\x1C"+
		"\x5\n\x6\x2\x1B\x17\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1A\x3\x2\x2\x2"+
		"\x1C\x1F\x3\x2\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E!\x3\x2"+
		"\x2\x2\x1F\x1D\x3\x2\x2\x2 \x14\x3\x2\x2\x2 \x15\x3\x2\x2\x2 \x16\x3\x2"+
		"\x2\x2!\x3\x3\x2\x2\x2\"#\a\x10\x2\x2#&\a\x15\x2\x2$%\a\b\x2\x2%\'\a\x15"+
		"\x2\x2&$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'(\x3\x2\x2\x2(\x31\a\x5\x2\x2).\x5"+
		"\x6\x4\x2*+\a\x3\x2\x2+-\x5\x6\x4\x2,*\x3\x2\x2\x2-\x30\x3\x2\x2\x2.,"+
		"\x3\x2\x2\x2./\x3\x2\x2\x2/\x32\x3\x2\x2\x2\x30.\x3\x2\x2\x2\x31)\x3\x2"+
		"\x2\x2\x31\x32\x3\x2\x2\x2\x32\x33\x3\x2\x2\x2\x33\x34\a\t\x2\x2\x34\x5"+
		"\x3\x2\x2\x2\x35\x36\t\x2\x2\x2\x36\x37\a\x15\x2\x2\x37\x38\a\xE\x2\x2"+
		"\x38\a\x3\x2\x2\x2\x39:\a\x11\x2\x2:;\a\x15\x2\x2;@\a\x15\x2\x2<=\a\x3"+
		"\x2\x2=?\a\x15\x2\x2><\x3\x2\x2\x2?\x42\x3\x2\x2\x2@>\x3\x2\x2\x2@\x41"+
		"\x3\x2\x2\x2\x41\x43\x3\x2\x2\x2\x42@\x3\x2\x2\x2\x43\x44\a\xE\x2\x2\x44"+
		"\t\x3\x2\x2\x2\x45\x46\a\x6\x2\x2\x46G\a\x15\x2\x2GN\a\x4\x2\x2HI\a\x15"+
		"\x2\x2IJ\a\x15\x2\x2JK\x3\x2\x2\x2KL\a\x3\x2\x2LM\a\x15\x2\x2MO\a\x15"+
		"\x2\x2NH\x3\x2\x2\x2NO\x3\x2\x2\x2OP\x3\x2\x2\x2PQ\a\f\x2\x2QR\a\xF\x2"+
		"\x2RS\a\r\x2\x2ST\x5\x12\n\x2TU\a\v\x2\x2UY\a\x5\x2\x2VX\x5\f\a\x2WV\x3"+
		"\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2\x2\x2Z\\\x3\x2\x2\x2[Y\x3"+
		"\x2\x2\x2\\]\a\t\x2\x2]^\a\n\x2\x2^\x62\a\x5\x2\x2_\x61\x5\x10\t\x2`_"+
		"\x3\x2\x2\x2\x61\x64\x3\x2\x2\x2\x62`\x3\x2\x2\x2\x62\x63\x3\x2\x2\x2"+
		"\x63\x65\x3\x2\x2\x2\x64\x62\x3\x2\x2\x2\x65\x66\a\t\x2\x2\x66g\a\a\x2"+
		"\x2gk\a\x5\x2\x2hj\x5\x10\t\x2ih\x3\x2\x2\x2jm\x3\x2\x2\x2ki\x3\x2\x2"+
		"\x2kl\x3\x2\x2\x2ln\x3\x2\x2\x2mk\x3\x2\x2\x2no\a\t\x2\x2o\v\x3\x2\x2"+
		"\x2pq\a\x15\x2\x2qr\t\x3\x2\x2ru\x5\x12\n\x2su\x5\xE\b\x2tp\x3\x2\x2\x2"+
		"ts\x3\x2\x2\x2u\r\x3\x2\x2\x2vw\a\x15\x2\x2wy\a\x4\x2\x2xz\t\x4\x2\x2"+
		"yx\x3\x2\x2\x2yz\x3\x2\x2\x2z\x80\x3\x2\x2\x2{|\a\x3\x2\x2|\x7F\a\x15"+
		"\x2\x2}\x7F\a\x16\x2\x2~{\x3\x2\x2\x2~}\x3\x2\x2\x2\x7F\x82\x3\x2\x2\x2"+
		"\x80~\x3\x2\x2\x2\x80\x81\x3\x2\x2\x2\x81\x83\x3\x2\x2\x2\x82\x80\x3\x2"+
		"\x2\x2\x83\x84\a\f\x2\x2\x84\xF\x3\x2\x2\x2\x85\x86\a\x15\x2\x2\x86\x87"+
		"\a\x12\x2\x2\x87\x88\x5\x12\n\x2\x88\x89\a\xE\x2\x2\x89\x8C\x3\x2\x2\x2"+
		"\x8A\x8C\x5\xE\b\x2\x8B\x85\x3\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x11\x3"+
		"\x2\x2\x2\x8D\x8E\b\n\x1\x2\x8E\x95\a\x15\x2\x2\x8F\x95\a\x16\x2\x2\x90"+
		"\x91\a\x4\x2\x2\x91\x92\x5\x12\n\x2\x92\x93\a\f\x2\x2\x93\x95\x3\x2\x2"+
		"\x2\x94\x8D\x3\x2\x2\x2\x94\x8F\x3\x2\x2\x2\x94\x90\x3\x2\x2\x2\x95\x9E"+
		"\x3\x2\x2\x2\x96\x97\f\a\x2\x2\x97\x98\t\x5\x2\x2\x98\x9D\x5\x12\n\b\x99"+
		"\x9A\f\x6\x2\x2\x9A\x9B\t\x6\x2\x2\x9B\x9D\x5\x12\n\a\x9C\x96\x3\x2\x2"+
		"\x2\x9C\x99\x3\x2\x2\x2\x9D\xA0\x3\x2\x2\x2\x9E\x9C\x3\x2\x2\x2\x9E\x9F"+
		"\x3\x2\x2\x2\x9F\x13\x3\x2\x2\x2\xA0\x9E\x3\x2\x2\x2\x15\x1B\x1D &.\x31"+
		"@NY\x62kty~\x80\x8B\x94\x9C\x9E";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EnvironmentCreator.Gammars
