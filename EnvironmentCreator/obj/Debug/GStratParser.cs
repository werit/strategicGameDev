//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.2.2-SNAPSHOT
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from C:\ANTLR\Grammars\GStrat.g4 by ANTLR 4.2.2-SNAPSHOT

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591

namespace EnvironmentCreator.Gammars {
#pragma warning disable 3021
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.2.2-SNAPSHOT")]
[System.CLSCompliant(false)]
public partial class GStratParser : Parser {
	public const int
		T__14=1, T__13=2, T__12=3, T__11=4, T__10=5, T__9=6, T__8=7, T__7=8, T__6=9, 
		T__5=10, T__4=11, T__3=12, T__2=13, T__1=14, T__0=15, BOOL_ID=16, NUMBER_ID=17, 
		NAME=18, INT=19, MUL=20, DIV=21, MOD=22, ADD=23, SUB=24, EQUAL=25, NOT_EQUAL=26, 
		LESS_THEN=27, LESS__OR_EQ=28, MORE_THEN=29, MORE_OR_EQ=30, ASSIGN=31, 
		ASSIGN_MINUS=32, ASSIGN_ADD=33, ASSIGN_DIV=34, ASSIGN_MUL=35, ASSIGN_MOD=36;
	public static readonly string[] tokenNames = {
		"<INVALID>", "','", "'('", "'{'", "'action'", "'effe'", "'extends'", "'}'", 
		"'effs'", "'pre'", "')'", "'.'", "';'", "'duration'", "'type'", "'instance'", 
		"'boolean'", "'number'", "NAME", "INT", "'*'", "'/'", "'%'", "'+'", "'-'", 
		"'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'='", "'-='", "'+='", "'/='", 
		"'*='", "'%='"
	};
	public const int
		RULE_root = 0, RULE_type = 1, RULE_variable = 2, RULE_instance = 3, RULE_action = 4, 
		RULE_effecte = 5, RULE_precondition = 6, RULE_functionCall = 7, RULE_effect = 8, 
		RULE_expression = 9, RULE_id = 10;
	public static readonly string[] ruleNames = {
		"root", "type", "variable", "instance", "action", "effecte", "precondition", 
		"functionCall", "effect", "expression", "id"
	};

	public override string GrammarFileName { get { return "GStrat.g4"; } }

	public override string[] TokenNames { get { return tokenNames; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public GStratParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class RootContext : ParserRuleContext {
		public TypeContext type(int i) {
			return GetRuleContext<TypeContext>(i);
		}
		public IReadOnlyList<TypeContext> type() {
			return GetRuleContexts<TypeContext>();
		}
		public IReadOnlyList<ActionContext> action() {
			return GetRuleContexts<ActionContext>();
		}
		public InstanceContext instance(int i) {
			return GetRuleContext<InstanceContext>(i);
		}
		public IReadOnlyList<InstanceContext> instance() {
			return GetRuleContexts<InstanceContext>();
		}
		public ActionContext action(int i) {
			return GetRuleContext<ActionContext>(i);
		}
		public RootContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_root; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterRoot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitRoot(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitRoot(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public RootContext root() {
		RootContext _localctx = new RootContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_root);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 27;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << 4) | (1L << 14) | (1L << 15))) != 0)) {
				{
				State = 25;
				switch (_input.La(1)) {
				case 14:
					{
					State = 22; type();
					}
					break;
				case 15:
					{
					State = 23; instance();
					}
					break;
				case 4:
					{
					State = 24; action();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 29;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_type; }
	 
		public TypeContext() { }
		public virtual void CopyFrom(TypeContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewTypeContext : TypeContext {
		public ITerminalNode NAME(int i) {
			return GetToken(GStratParser.NAME, i);
		}
		public IReadOnlyList<VariableContext> variable() {
			return GetRuleContexts<VariableContext>();
		}
		public VariableContext variable(int i) {
			return GetRuleContext<VariableContext>(i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(GStratParser.NAME); }
		public NewTypeContext(TypeContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterNewType(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitNewType(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_type);
		int _la;
		try {
			_localctx = new NewTypeContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 30; Match(14);
			State = 31; Match(NAME);
			State = 34;
			_la = _input.La(1);
			if (_la==6) {
				{
				State = 32; Match(6);
				State = 33; Match(NAME);
				}
			}

			State = 36; Match(3);
			State = 40;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==BOOL_ID || _la==NUMBER_ID) {
				{
				{
				State = 37; variable();
				}
				}
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 43; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class VariableContext : ParserRuleContext {
		public VariableContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_variable; }
	 
		public VariableContext() { }
		public virtual void CopyFrom(VariableContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewVariableContext : VariableContext {
		public IToken opt;
		public ITerminalNode NAME() { return GetToken(GStratParser.NAME, 0); }
		public NewVariableContext(VariableContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterNewVariable(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitNewVariable(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewVariable(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public VariableContext variable() {
		VariableContext _localctx = new VariableContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_variable);
		int _la;
		try {
			_localctx = new NewVariableContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 45;
			((NewVariableContext)_localctx).opt = _input.Lt(1);
			_la = _input.La(1);
			if ( !(_la==BOOL_ID || _la==NUMBER_ID) ) {
				((NewVariableContext)_localctx).opt = _errHandler.RecoverInline(this);
			}
			Consume();
			State = 46; Match(NAME);
			State = 47; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class InstanceContext : ParserRuleContext {
		public InstanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_instance; }
	 
		public InstanceContext() { }
		public virtual void CopyFrom(InstanceContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class NewInstancesContext : InstanceContext {
		public ITerminalNode NAME(int i) {
			return GetToken(GStratParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(GStratParser.NAME); }
		public NewInstancesContext(InstanceContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterNewInstances(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitNewInstances(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNewInstances(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public InstanceContext instance() {
		InstanceContext _localctx = new InstanceContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_instance);
		int _la;
		try {
			_localctx = new NewInstancesContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 49; Match(15);
			State = 50; Match(NAME);
			State = 51; Match(NAME);
			State = 56;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1) {
				{
				{
				State = 52; Match(1);
				State = 53; Match(NAME);
				}
				}
				State = 58;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 59; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ActionContext : ParserRuleContext {
		public PreconditionContext precondition(int i) {
			return GetRuleContext<PreconditionContext>(i);
		}
		public IReadOnlyList<EffecteContext> effecte() {
			return GetRuleContexts<EffecteContext>();
		}
		public ITerminalNode NAME(int i) {
			return GetToken(GStratParser.NAME, i);
		}
		public IReadOnlyList<EffectContext> effect() {
			return GetRuleContexts<EffectContext>();
		}
		public EffecteContext effecte(int i) {
			return GetRuleContext<EffecteContext>(i);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(GStratParser.NAME); }
		public EffectContext effect(int i) {
			return GetRuleContext<EffectContext>(i);
		}
		public IReadOnlyList<PreconditionContext> precondition() {
			return GetRuleContexts<PreconditionContext>();
		}
		public ActionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_action; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAction(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAction(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ActionContext action() {
		ActionContext _localctx = new ActionContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_action);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(4);
			State = 62; Match(NAME);
			State = 63; Match(2);
			State = 74;
			_la = _input.La(1);
			if (_la==NAME) {
				{
				State = 64; Match(NAME);
				State = 65; Match(NAME);
				State = 71;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==1) {
					{
					{
					State = 66; Match(1);
					State = 67; Match(NAME);
					State = 68; Match(NAME);
					}
					}
					State = 73;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 76; Match(10);
			State = 77; Match(13);
			State = 78; Match(ASSIGN);
			State = 79; expression(0);
			State = 80; Match(12);
			State = 81; Match(9);
			State = 82; Match(3);
			State = 90;
			_la = _input.La(1);
			if (_la==NAME) {
				{
				State = 83; precondition();
				State = 87;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 84; precondition();
					}
					}
					State = 89;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 92; Match(7);
			State = 93; Match(8);
			State = 94; Match(3);
			State = 102;
			_la = _input.La(1);
			if (_la==NAME) {
				{
				State = 95; effect();
				State = 99;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 96; effect();
					}
					}
					State = 101;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 104; Match(7);
			State = 105; Match(5);
			State = 106; Match(3);
			State = 114;
			_la = _input.La(1);
			if (_la==NAME) {
				{
				State = 107; effecte();
				State = 111;
				_errHandler.Sync(this);
				_la = _input.La(1);
				while (_la==NAME) {
					{
					{
					State = 108; effecte();
					}
					}
					State = 113;
					_errHandler.Sync(this);
					_la = _input.La(1);
				}
				}
			}

			State = 116; Match(7);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffecteContext : ParserRuleContext {
		public EffectContext effect() {
			return GetRuleContext<EffectContext>(0);
		}
		public EffecteContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effecte; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterEffecte(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitEffecte(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitEffecte(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffecteContext effecte() {
		EffecteContext _localctx = new EffecteContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_effecte);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 118; effect();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PreconditionContext : ParserRuleContext {
		public PreconditionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_precondition; }
	 
		public PreconditionContext() { }
		public virtual void CopyFrom(PreconditionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PrecondExprContext : PreconditionContext {
		public IToken op;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public PrecondExprContext(PreconditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterPrecondExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitPrecondExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPrecondExpr(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class CallFnPrecondContext : PreconditionContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallFnPrecondContext(PreconditionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterCallFnPrecond(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitCallFnPrecond(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFnPrecond(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PreconditionContext precondition() {
		PreconditionContext _localctx = new PreconditionContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_precondition);
		int _la;
		try {
			State = 126;
			switch ( Interpreter.AdaptivePredict(_input,13,_ctx) ) {
			case 1:
				_localctx = new PrecondExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 120; id();
				State = 121;
				((PrecondExprContext)_localctx).op = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << EQUAL) | (1L << NOT_EQUAL) | (1L << LESS_THEN) | (1L << LESS__OR_EQ) | (1L << MORE_THEN) | (1L << MORE_OR_EQ))) != 0)) ) {
					((PrecondExprContext)_localctx).op = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 122; expression(0);
				State = 123; Match(12);
				}
				break;

			case 2:
				_localctx = new CallFnPrecondContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 125; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionCallContext : ParserRuleContext {
		public IReadOnlyList<IdContext> id() {
			return GetRuleContexts<IdContext>();
		}
		public IReadOnlyList<ITerminalNode> INT() { return GetTokens(GStratParser.INT); }
		public IdContext id(int i) {
			return GetRuleContext<IdContext>(i);
		}
		public ITerminalNode NAME() { return GetToken(GStratParser.NAME, 0); }
		public ITerminalNode INT(int i) {
			return GetToken(GStratParser.INT, i);
		}
		public FunctionCallContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_functionCall; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterFunctionCall(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitFunctionCall(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunctionCall(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionCallContext functionCall() {
		FunctionCallContext _localctx = new FunctionCallContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_functionCall);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128; Match(NAME);
			State = 129; Match(2);
			State = 132;
			switch ( Interpreter.AdaptivePredict(_input,14,_ctx) ) {
			case 1:
				{
				State = 130; id();
				}
				break;

			case 2:
				{
				State = 131; Match(INT);
				}
				break;
			}
			State = 139;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while (_la==1 || _la==INT) {
				{
				State = 137;
				switch (_input.La(1)) {
				case 1:
					{
					State = 134; Match(1);
					State = 135; id();
					}
					break;
				case INT:
					{
					State = 136; Match(INT);
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 141;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 142; Match(10);
			State = 143; Match(12);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EffectContext : ParserRuleContext {
		public EffectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_effect; }
	 
		public EffectContext() { }
		public virtual void CopyFrom(EffectContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class CallFnContext : EffectContext {
		public FunctionCallContext functionCall() {
			return GetRuleContext<FunctionCallContext>(0);
		}
		public CallFnContext(EffectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterCallFn(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitCallFn(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCallFn(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AssignExprContext : EffectContext {
		public IToken opt;
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignExprContext(EffectContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAssignExpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAssignExpr(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAssignExpr(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public EffectContext effect() {
		EffectContext _localctx = new EffectContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_effect);
		int _la;
		try {
			State = 151;
			switch ( Interpreter.AdaptivePredict(_input,17,_ctx) ) {
			case 1:
				_localctx = new AssignExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 145; id();
				State = 146;
				((AssignExprContext)_localctx).opt = _input.Lt(1);
				_la = _input.La(1);
				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << ASSIGN) | (1L << ASSIGN_MINUS) | (1L << ASSIGN_ADD) | (1L << ASSIGN_DIV) | (1L << ASSIGN_MUL) | (1L << ASSIGN_MOD))) != 0)) ) {
					((AssignExprContext)_localctx).opt = _errHandler.RecoverInline(this);
				}
				Consume();
				State = 147; expression(0);
				State = 148; Match(12);
				}
				break;

			case 2:
				_localctx = new CallFnContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 150; functionCall();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_expression; }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class IdentContext : ExpressionContext {
		public IdContext id() {
			return GetRuleContext<IdContext>(0);
		}
		public IdentContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterIdent(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitIdent(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitIdent(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class IntContext : ExpressionContext {
		public ITerminalNode INT() { return GetToken(GStratParser.INT, 0); }
		public IntContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterInt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitInt(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitInt(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AddSubContext : ExpressionContext {
		public IToken opt;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public AddSubContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterAddSub(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitAddSub(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAddSub(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MulDivModContext : ExpressionContext {
		public IToken opt;
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public IReadOnlyList<ExpressionContext> expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public MulDivModContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterMulDivMod(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitMulDivMod(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMulDivMod(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthContext : ExpressionContext {
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterParenth(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitParenth(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenth(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(_ctx, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 18;
		EnterRecursionRule(_localctx, 18, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 160;
			switch (_input.La(1)) {
			case NAME:
				{
				_localctx = new IdentContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 154; id();
				}
				break;
			case INT:
				{
				_localctx = new IntContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 155; Match(INT);
				}
				break;
			case 2:
				{
				_localctx = new ParenthContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 156; Match(2);
				State = 157; expression(0);
				State = 158; Match(10);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			_ctx.stop = _input.Lt(-1);
			State = 170;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			while ( _alt!=2 && _alt!=ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 168;
					switch ( Interpreter.AdaptivePredict(_input,19,_ctx) ) {
					case 1:
						{
						_localctx = new MulDivModContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 162;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 163;
						((MulDivModContext)_localctx).opt = _input.Lt(1);
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << MUL) | (1L << DIV) | (1L << MOD))) != 0)) ) {
							((MulDivModContext)_localctx).opt = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 164; expression(6);
						}
						break;

					case 2:
						{
						_localctx = new AddSubContext(new ExpressionContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expression);
						State = 165;
						if (!(Precpred(_ctx, 4))) throw new FailedPredicateException(this, "Precpred(_ctx, 4)");
						State = 166;
						((AddSubContext)_localctx).opt = _input.Lt(1);
						_la = _input.La(1);
						if ( !(_la==ADD || _la==SUB) ) {
							((AddSubContext)_localctx).opt = _errHandler.RecoverInline(this);
						}
						Consume();
						State = 167; expression(5);
						}
						break;
					}
					} 
				}
				State = 172;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,20,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class IdContext : ParserRuleContext {
		public ITerminalNode NAME(int i) {
			return GetToken(GStratParser.NAME, i);
		}
		public IReadOnlyList<ITerminalNode> NAME() { return GetTokens(GStratParser.NAME); }
		public IdContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int GetRuleIndex() { return RULE_id; }
		public override void EnterRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.EnterId(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			IGStratListener typedListener = listener as IGStratListener;
			if (typedListener != null) typedListener.ExitId(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IGStratVisitor<TResult> typedVisitor = visitor as IGStratVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitId(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public IdContext id() {
		IdContext _localctx = new IdContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_id);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 173; Match(NAME);
			State = 174; Match(11);
			State = 175; Match(NAME);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 9: return expression_sempred((ExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 5);

		case 1: return Precpred(_ctx, 4);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3&\xB4\x4\x2\t\x2"+
		"\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4\t\t"+
		"\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x3\x2\x3\x2\x3\x2\a\x2\x1C\n\x2\f\x2\xE"+
		"\x2\x1F\v\x2\x3\x3\x3\x3\x3\x3\x3\x3\x5\x3%\n\x3\x3\x3\x3\x3\a\x3)\n\x3"+
		"\f\x3\xE\x3,\v\x3\x3\x3\x3\x3\x3\x4\x3\x4\x3\x4\x3\x4\x3\x5\x3\x5\x3\x5"+
		"\x3\x5\x3\x5\a\x5\x39\n\x5\f\x5\xE\x5<\v\x5\x3\x5\x3\x5\x3\x6\x3\x6\x3"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6H\n\x6\f\x6\xE\x6K\v\x6\x5\x6M\n"+
		"\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6X\n\x6\f"+
		"\x6\xE\x6[\v\x6\x5\x6]\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6\x64\n\x6"+
		"\f\x6\xE\x6g\v\x6\x5\x6i\n\x6\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\a\x6p\n\x6"+
		"\f\x6\xE\x6s\v\x6\x5\x6u\n\x6\x3\x6\x3\x6\x3\a\x3\a\x3\b\x3\b\x3\b\x3"+
		"\b\x3\b\x3\b\x5\b\x81\n\b\x3\t\x3\t\x3\t\x3\t\x5\t\x87\n\t\x3\t\x3\t\x3"+
		"\t\a\t\x8C\n\t\f\t\xE\t\x8F\v\t\x3\t\x3\t\x3\t\x3\n\x3\n\x3\n\x3\n\x3"+
		"\n\x3\n\x5\n\x9A\n\n\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x3\v\x5\v\xA3\n\v\x3"+
		"\v\x3\v\x3\v\x3\v\x3\v\x3\v\a\v\xAB\n\v\f\v\xE\v\xAE\v\v\x3\f\x3\f\x3"+
		"\f\x3\f\x3\f\x2\x2\x3\x14\r\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10"+
		"\x2\x12\x2\x14\x2\x16\x2\x2\a\x3\x2\x12\x13\x3\x2\x1B \x3\x2!&\x3\x2\x16"+
		"\x18\x3\x2\x19\x1A\xC0\x2\x1D\x3\x2\x2\x2\x4 \x3\x2\x2\x2\x6/\x3\x2\x2"+
		"\x2\b\x33\x3\x2\x2\x2\n?\x3\x2\x2\x2\fx\x3\x2\x2\x2\xE\x80\x3\x2\x2\x2"+
		"\x10\x82\x3\x2\x2\x2\x12\x99\x3\x2\x2\x2\x14\xA2\x3\x2\x2\x2\x16\xAF\x3"+
		"\x2\x2\x2\x18\x1C\x5\x4\x3\x2\x19\x1C\x5\b\x5\x2\x1A\x1C\x5\n\x6\x2\x1B"+
		"\x18\x3\x2\x2\x2\x1B\x19\x3\x2\x2\x2\x1B\x1A\x3\x2\x2\x2\x1C\x1F\x3\x2"+
		"\x2\x2\x1D\x1B\x3\x2\x2\x2\x1D\x1E\x3\x2\x2\x2\x1E\x3\x3\x2\x2\x2\x1F"+
		"\x1D\x3\x2\x2\x2 !\a\x10\x2\x2!$\a\x14\x2\x2\"#\a\b\x2\x2#%\a\x14\x2\x2"+
		"$\"\x3\x2\x2\x2$%\x3\x2\x2\x2%&\x3\x2\x2\x2&*\a\x5\x2\x2\')\x5\x6\x4\x2"+
		"(\'\x3\x2\x2\x2),\x3\x2\x2\x2*(\x3\x2\x2\x2*+\x3\x2\x2\x2+-\x3\x2\x2\x2"+
		",*\x3\x2\x2\x2-.\a\t\x2\x2.\x5\x3\x2\x2\x2/\x30\t\x2\x2\x2\x30\x31\a\x14"+
		"\x2\x2\x31\x32\a\xE\x2\x2\x32\a\x3\x2\x2\x2\x33\x34\a\x11\x2\x2\x34\x35"+
		"\a\x14\x2\x2\x35:\a\x14\x2\x2\x36\x37\a\x3\x2\x2\x37\x39\a\x14\x2\x2\x38"+
		"\x36\x3\x2\x2\x2\x39<\x3\x2\x2\x2:\x38\x3\x2\x2\x2:;\x3\x2\x2\x2;=\x3"+
		"\x2\x2\x2<:\x3\x2\x2\x2=>\a\xE\x2\x2>\t\x3\x2\x2\x2?@\a\x6\x2\x2@\x41"+
		"\a\x14\x2\x2\x41L\a\x4\x2\x2\x42\x43\a\x14\x2\x2\x43I\a\x14\x2\x2\x44"+
		"\x45\a\x3\x2\x2\x45\x46\a\x14\x2\x2\x46H\a\x14\x2\x2G\x44\x3\x2\x2\x2"+
		"HK\x3\x2\x2\x2IG\x3\x2\x2\x2IJ\x3\x2\x2\x2JM\x3\x2\x2\x2KI\x3\x2\x2\x2"+
		"L\x42\x3\x2\x2\x2LM\x3\x2\x2\x2MN\x3\x2\x2\x2NO\a\f\x2\x2OP\a\xF\x2\x2"+
		"PQ\a!\x2\x2QR\x5\x14\v\x2RS\a\xE\x2\x2ST\a\v\x2\x2T\\\a\x5\x2\x2UY\x5"+
		"\xE\b\x2VX\x5\xE\b\x2WV\x3\x2\x2\x2X[\x3\x2\x2\x2YW\x3\x2\x2\x2YZ\x3\x2"+
		"\x2\x2Z]\x3\x2\x2\x2[Y\x3\x2\x2\x2\\U\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x3"+
		"\x2\x2\x2^_\a\t\x2\x2_`\a\n\x2\x2`h\a\x5\x2\x2\x61\x65\x5\x12\n\x2\x62"+
		"\x64\x5\x12\n\x2\x63\x62\x3\x2\x2\x2\x64g\x3\x2\x2\x2\x65\x63\x3\x2\x2"+
		"\x2\x65\x66\x3\x2\x2\x2\x66i\x3\x2\x2\x2g\x65\x3\x2\x2\x2h\x61\x3\x2\x2"+
		"\x2hi\x3\x2\x2\x2ij\x3\x2\x2\x2jk\a\t\x2\x2kl\a\a\x2\x2lt\a\x5\x2\x2m"+
		"q\x5\f\a\x2np\x5\f\a\x2on\x3\x2\x2\x2ps\x3\x2\x2\x2qo\x3\x2\x2\x2qr\x3"+
		"\x2\x2\x2ru\x3\x2\x2\x2sq\x3\x2\x2\x2tm\x3\x2\x2\x2tu\x3\x2\x2\x2uv\x3"+
		"\x2\x2\x2vw\a\t\x2\x2w\v\x3\x2\x2\x2xy\x5\x12\n\x2y\r\x3\x2\x2\x2z{\x5"+
		"\x16\f\x2{|\t\x3\x2\x2|}\x5\x14\v\x2}~\a\xE\x2\x2~\x81\x3\x2\x2\x2\x7F"+
		"\x81\x5\x10\t\x2\x80z\x3\x2\x2\x2\x80\x7F\x3\x2\x2\x2\x81\xF\x3\x2\x2"+
		"\x2\x82\x83\a\x14\x2\x2\x83\x86\a\x4\x2\x2\x84\x87\x5\x16\f\x2\x85\x87"+
		"\a\x15\x2\x2\x86\x84\x3\x2\x2\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2"+
		"\x2\x87\x8D\x3\x2\x2\x2\x88\x89\a\x3\x2\x2\x89\x8C\x5\x16\f\x2\x8A\x8C"+
		"\a\x15\x2\x2\x8B\x88\x3\x2\x2\x2\x8B\x8A\x3\x2\x2\x2\x8C\x8F\x3\x2\x2"+
		"\x2\x8D\x8B\x3\x2\x2\x2\x8D\x8E\x3\x2\x2\x2\x8E\x90\x3\x2\x2\x2\x8F\x8D"+
		"\x3\x2\x2\x2\x90\x91\a\f\x2\x2\x91\x92\a\xE\x2\x2\x92\x11\x3\x2\x2\x2"+
		"\x93\x94\x5\x16\f\x2\x94\x95\t\x4\x2\x2\x95\x96\x5\x14\v\x2\x96\x97\a"+
		"\xE\x2\x2\x97\x9A\x3\x2\x2\x2\x98\x9A\x5\x10\t\x2\x99\x93\x3\x2\x2\x2"+
		"\x99\x98\x3\x2\x2\x2\x9A\x13\x3\x2\x2\x2\x9B\x9C\b\v\x1\x2\x9C\xA3\x5"+
		"\x16\f\x2\x9D\xA3\a\x15\x2\x2\x9E\x9F\a\x4\x2\x2\x9F\xA0\x5\x14\v\x2\xA0"+
		"\xA1\a\f\x2\x2\xA1\xA3\x3\x2\x2\x2\xA2\x9B\x3\x2\x2\x2\xA2\x9D\x3\x2\x2"+
		"\x2\xA2\x9E\x3\x2\x2\x2\xA3\xAC\x3\x2\x2\x2\xA4\xA5\f\a\x2\x2\xA5\xA6"+
		"\t\x5\x2\x2\xA6\xAB\x5\x14\v\b\xA7\xA8\f\x6\x2\x2\xA8\xA9\t\x6\x2\x2\xA9"+
		"\xAB\x5\x14\v\a\xAA\xA4\x3\x2\x2\x2\xAA\xA7\x3\x2\x2\x2\xAB\xAE\x3\x2"+
		"\x2\x2\xAC\xAA\x3\x2\x2\x2\xAC\xAD\x3\x2\x2\x2\xAD\x15\x3\x2\x2\x2\xAE"+
		"\xAC\x3\x2\x2\x2\xAF\xB0\a\x14\x2\x2\xB0\xB1\a\r\x2\x2\xB1\xB2\a\x14\x2"+
		"\x2\xB2\x17\x3\x2\x2\x2\x17\x1B\x1D$*:ILY\\\x65hqt\x80\x86\x8B\x8D\x99"+
		"\xA2\xAA\xAC";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
} // namespace EnvironmentCreator.Gammars
